set t_Co=256

let $MYVIMRC='~/.vimrc'

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
  autocmd bufwritepost .vimrc.local source $MYVIMRC
  autocmd bufwritepost .vimrc.bundles source $MYVIMRC
  autocmd bufwritepost .vimrc.bundles PlugInstall
  autocmd bufwritepost .vimrc.bundles.local source $MYVIMRC
  autocmd bufwritepost .vimrc.bundles.local PlugInstall
endif

if has('gui_running')
      colorscheme gruvbox
      set background=dark
endif

" reSource
nmap <leader>r :source $MYVIMRC<CR>

" open .vimrc.local
nmap <leader>v :tabedit $MYVIMRC.local<CR>
nmap <leader>V :tabedit $MYVIMRC<CR>
nmap <leader>c :tabedit $MYVIMRC.bundles.local<CR>
nmap <leader>C :tabedit $MYVIMRC.bundles<CR>

" focus NERDTree
nmap <leader>n :NERDTreeToggle<CR>

" toggle Tagbar
nmap <leader>t :TagbarToggle<CR>

" gitblame and tab navigation
nmap <leader>b :Gblame<CR>
nmap <leader>, gT
nmap <leader>. gt

" next/previous quickfix
nmap <leader>j :cn<CR>
nmap <leader>k :cp<CR>

" Ack search for the word including its boundries
map <leader>q :Ack '\b<cword>\b'<CR>
nmap <leader>a :Ack "

map <leader>s :%s/"<cword>"/

" Allow <C-I> for file navigation
noremap <C-N> <C-A>

" Stepping integration in vim-LLDB
nmap <leader>L :Lstep<CR>
nmap <leader>; :Lexpression 
nmap <leader>l :Lbreakpoint<CR>

nnoremap <Space><Space> :Lnext<CR>
nnoremap <Left> :Lcontinue<CR>
nnoremap <Right> :Lstep<CR>
nnoremap <Up> :Lup<CR>
nnoremap <Down> :Ldown<CR>
let g:ackprg = 'ag -F --ignore tags --nogroup --nocolor --column'

nmap <leader>x :cw<CR>

set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

set mouse+=a

set ttymouse=xterm2

" whitespace
set list
set listchars=tab:\⣧\⣀

set undofile                " Save undo's after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo " " " "

set updatetime=500
nnoremap <leader>w :exe 'silent! ptag '.expand("<cword>")<CR>

nmap <leader>z :set invlist<CR>

let tlist_vala_settings='c#;d:macro;t:typedef;n:namespace;c:class;'.
  \ 'E:event;g:enum;s:struct;i:interface;'.
  \ 'p:properties;m:method'


highlight clear SignColumn
highlight GitGutterAdd ctermfg=green guifg=darkgreen
highlight GitGutterChange ctermfg=yellow guifg=darkyellow
highlight GitGutterDelete ctermfg=red guifg=darkred
highlight GitGutterChangeDelete ctermfg=yellow guifg=darkyellow

" single line scroll
:map <ScrollWheelUp> 2<C-Y>
:map <ScrollWheelDown> 2<C-E>

let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_left_sep=' '
let g:airline_right_sep=' '

let g:airline_theme="understated"

map gm :call LivedownPreview()<CR>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" wildignore
" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files']

if has('neovim')
  :tnoremap <Esc> <C-\><C-n>
end

let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

nmap <leader>f :Limelight!!<CR>

" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 1

